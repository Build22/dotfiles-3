#!/usr/bin/env ruby

class Deployer
  def initialize(remote)
    @remote = remote.first
  end

  def run
    heroku_remote_or_die
    master_or_die
    working_directory_clean_or_die
    index_clean_or_die
    test_and_push
  end

  private

  def heroku_remotes
    remotes = `git remote`.split.map(&:chomp)

    remotes.select do |remote|
      url = `git config --get remote.#{remote}.url`
      url =~ /heroku/
    end
  end

  def heroku_remote_or_die
    unless heroku_remotes.include? @remote
      die "'#{@remote}' does not seem to be a heroku app"
    end
  end

  def master_or_die
    current_branch = `git rev-parse --abbrev-ref HEAD`.chomp
    if current_branch != 'master'
      die "'deploy' command limited to master. Current branch: [#{current_branch}]"
    end
  end

  def working_directory_clean_or_die
    git_clean
  end

  def index_clean_or_die
    git_clean(true)
  end

  def git_clean(index=false)
    if index
      clean = system("git diff --cached --exit-code > /dev/null 2>&1")
    else
      clean = system("git diff --exit-code > /dev/null 2>&1")
    end
    if !clean
      if index
        die "Index has unsaved changes. Aborting deploy."
      else
        die "Working directory has unsaved changes. Aborting deploy."
      end
    end
  end

  def test_and_push
    system "rake && git push #{@remote} master"
  end

  def die(msg)
    puts msg
    exit 1
  end
end

Deployer.new(ARGV).run
