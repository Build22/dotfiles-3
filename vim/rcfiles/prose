" Prose (blogging, readmes, any other markdown) configurations
"------------------------

" Setup spell checking, and use <Ctrl>s to open spelling completion menu
au filetype markdown call MarkdownMode()

if exists("+spelllang")
    set spelllang=en_us
endif
set spellfile=~/.vim/spell/en.utf-8.add
command! Onspell set spell
command! Offspell set nospell

nnoremap <LEADER>more i<!--more--><ESC>
nnoremap <leader>gf gqip

function! WrapCurrentWord(format)
  normal! gv
  if a:format == 'bold'
    let wrapping = '**'
  else
    let wrapping = '_'
  endif

  execute 'normal! "ac' . wrapping . 'a' . wrapping
endfunction

vnoremap <C-b> :call WrapCurrentWord("bold")<cr>
vnoremap <C-i> :call WrapCurrentWord("italic")<cr>

function! CodeBlock()
  let language = input('Language: ')
  execute 'normal! i``` ' . language
  execute 'normal! o```'
  normal O
  startinsert
endfunction
nnoremap <silent><leader>cb :call CodeBlock()<cr>

function! MarkdownMode()
  " setlocal spell        " Enable spell checking
  setlocal foldlevel=1  " Start with top heading open, other levels folded
  setlocal wrap         " Soft wrap lines that hit the edge
  setlocal linebreak    " Use word boundaries to break lines
  setlocal textwidth=0  " Do not hard wrap
  nnoremap <buffer> <leader>ns ]s
  nnoremap <buffer> <leader>sp ea<C-x><C-s>
  nnoremap <buffer> <leader>sf mm[s1z=`m
  nnoremap <buffer> <LEADER>more i<!--more--><ESC>
  nnoremap <buffer> <leader>gf gqip
  nnoremap <buffer> <leader>md :call OpenCurrentFileInMarked()<cr>
  nnoremap <buffer> <leader>bld mm"bciw**b**<esc>`m2l
  nnoremap <buffer> <leader>em mm"bciw*b*<esc>`m2l
  " Heading / underline funcitons
  nnoremap <buffer> <leader>u1 mmyypVr=`m<cr><esc>
  nnoremap <buffer> <leader>u2 mmyypVr-`m<cr><esc>
  nnoremap <buffer> <leader>u3 mm0i### <esc>`m4l
endfunction

function! OpenCurrentFileInMarked()
    let current_file = expand('%')
    let open_cmd = join(["open -a Marked", current_file])
    call system(open_cmd)
endfunction

" Create a markdown formatted link with the visually selected word as the
" anchor text. If auto_link == 1, then use the current item in the system
" clipboard, else prompt for the URL
function! ConvertVisualSelectionToLink(auto_link)
    normal! gv
    if a:auto_link
      let url = system('pbpaste')
    else
      let url = input("URL: ")
    endif
    if url != ''
      " execute 'normal! "lc[l](' . url . ')'
      execute 'normal! "lc[l][]'
      execute 'normal! mmGo[l]: ' . url . '`m'
    endif
endfunction

function! s:TitleCaseCurrentLine()
  normal mm
  s/\<\(\w\)\(\w*\)\>/\u\1\L\2/g
  normal `m
endfunction
command! TitleCaseCurrentLine call s:TitleCaseCurrentLine()
nmap gt :TitleCaseCurrentLine<cr>

vnoremap <C-k> :call ConvertVisualSelectionToLink(1)<cr>
" vnoremap <C-k> :call ConvertVisualSelectionToLink(0)<cr>

" vim:ft=vim
