" Search configurations
"------------------------

" Searching stuff
set hlsearch                    " hilight searches, map below to clear
nohlsearch                      " kill highliting on vimrc reload
set incsearch                   " do incremental searching
set ignorecase                  " Case insensitive...
set smartcase                   " ...except if you use UCase
nmap <F4> :silent noh<CR>
nnoremap <LEADER>rh :silent noh<CR>

" Mappings for quick search & replace. Global set to default
" Do a / search first, then leave pattern empty in :s// to use last
" In order, they are `all`, `visual`, `confirm`, `word`
map <Leader>sra :%s///g<left><left>
map <Leader>srv :s///g<left><left>
map <Leader>src :%s//gc<Left><Left><left>

" Global helper. First, compose a search to find all the relevant lines. Then
" compose a macro in @q register. Then hit up this mapping to start the global
" fun times.
nmap <leader>gg :g//normal <C-r>q
vmap <leader>gg :g//normal <C-r>q
nmap <leader>gp :g//p<cr>

" Search for selected text, forwards or backwards.
" http://vim.wikia.com/wiki/Search_for_visually_selected_text
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" vim:ft=vim
